One of the features that's integral to Widix is the ability to build and import
custom modules and their widgets to the application. The requirements of these
modules are relatively strict; every required object must be in the same relative
path to each module, and each object key must match in all of its instances.

 *** DIRECTORY STRUCTURE ***

	Note: It's suggested you place your requested module in the same directory
	as the application's default modules. Otherwise, make sure it's in a safe
	place that won't be moved, changed, or deleted accidentally.

	Note: File or directory names marked with an asterisk indicate that the name
	must be identical to the placeholder used here.

	ModuleDirectory
	|
	|--	*module.mdcf
	|
	|--	*module.js
	|
	|--	*modal.html
	|
	|-- support files for modal.html
	|
	|--	WidgetDirectory
	|	|
	|	|--	*widget.html
	|	|
	|	|--	*modal.html
	|	|
	|	|--	*settings.json
	|
	|--	WidgetDirectory
	|	|
	|	|--	*widget.html
	|	|
	|	|--	*modal.html
	|	|
	|	|--	*settings.json
	.
	.
	.

	Let's go through each file's purpose. You'll have a template for the entire directory system,
	with the definitions for required functions and html elements marked and commented for your
	use. Anything that's marked with an "ESSENTIAL" comment should only be changed where indicated.

	module.mdcf -- This is a json file. The funny extension is to make it easier for the application
	to locate the file. This file contains the configuration data for a module. It essentially
	provides a map with the names and locations of all of the modules widgets, as well as some other
	critical information.

	{
		author: <your name>,
		dependencies: [<like-package.json>],
		widgets: {
			<widget_name>: <./relative_directory_location>,..
		}
	}

	module.js -- This provides all of the controls for the module's data streams. When a widget is
	served and requests data from the express server instance, the Process Manager will pass the
	requested stream ids to this module, so that you can manage the fetching and processing of 
	fresh data, as well as the return of the proper object. Additionally, the application will
	call an export from this module at startup to check for any issues, like an outdated server
	authentication or connection issues. The template of this file will go into further depth
	about the responsibilities of each function, and the expected and recommended returns. Note,
	this will have access to 

	modal.html -- When the user opens the module settings, the application loads this modal. Here,
	you'll have a form for the module settings, and you can add your own forms to do things like
	authenticate to remote servers. Check out a default module's modal to get a better idea of what
	this should do. As a note, there's a fair bit of styling prebuilt for these. You're welcome to
	build this to look as you like, but the modal needs to have a submit and cancel button, unless
	there are no settings to change and the modal acts only as an information panel. When the submit
	button is pressed, instead of submitting the form with natural HTML, a function will be called
	that allows you to customize the way the new settings are built into object. This will then be
	passed back to the main process, which will use the keys from the built object to overwrite any
	matching options saved in settings.json.

	settings.json -- a json file that contains all of the persistent settings a user may choose. These
	are entirely up to you, and can look however you'd like. Just note that these should match with
	the settings option in modal.html, and they should only affect the creation of a widget, not the 
	state of an already created widget.

	WidgetDirectory -- name this what you want. It's just a directory for a single widget.

	WidgetDirectory/widget.html -- this is what the user renders on their OBS. When a user adds a widget
	to their application, this will get copied to a new location, as well as the settings from settings.json.
	This file will not have access to node, and will not have access to support documents, so make sure
	any scripting or styling is embedded or inline.

	WidgetDirectory/modal.html -- When you select the options for an already added widget, this is the
	modal that is loaded. This needs to be a single form with a submit and cancel button, because on
	submit the form data is passed back to the Process Manager, which will then overwrite any settings
	options from WidgetDirectory/settings.json.

	WidgetDirectory/settings.json -- this is copied with the widget.html file when a new widget is created.
	This holds all of the settings for a user's widget instance, which can include things like colors,
	text content, and anything else. It's important to note that all of these settings will need to be
	parsed and built into the actual widget.html file using scripting. There are some default scripts in
	place on the template to handle that.


